name: backend-ci

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - "backend/**"
  pull_request:
    branches:
      - "main"
    paths:
      - "backend/**"
env:
  IMAGE_NAME: "bureaublad-api"

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version-file: "backend/pyproject.toml"

      - name: Install uv
        run: pipx install uv

      - name: Install dependencies
        run: |
          cd backend/
          uv run sync

      - name: Run ruff format
        run: |
          cd backend/
          uv run ruff format --check

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version-file: "backend/pyproject.toml"

      - name: Install uv
        run: pipx install uv

      - name: Install dependencies
        run: |
          cd backend/
          uv run sync

      - name: pyright typecheck
        run: |
          cd backend/
          uv run pyright

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v6
        with:
          python-version-file: "backend/pyproject.toml"

      - name: Install uv
        run: pipx install uv

      - name: Install dependencies
        run: |
          cd backend/
          uv run sync

      - name: Run ruff linter
        run: |
          cd backend/
          uv run ruff check

      - name: Run hadolint linter
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: backend/Dockerfile
          format: json
          failure-threshold: warning

  build:
    needs: [format, lint, typecheck]
    if: github.event_name != 'pull_request'
    name: Push Docker image to github registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: get commit hash
        id: get_commit_hash
        run: |
          echo "commit_hash=$(git describe --tags)" >> "$GITHUB_OUTPUT"

      - name: Make changes to project to inject commit hash
        run: |
          sed -i 's/VERSION: str = .*$/VERSION: str = "${{ steps.get_commit_hash.outputs.commit_hash }}"/g' backend/app/const.py

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/minbzk/${{ env.IMAGE_NAME }}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index

      - name: Build and push Docker images
        id: push
        uses: docker/build-push-action@v6
        with:
          context: backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          platforms: linux/amd64,linux/arm64

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ghcr.io/minbzk/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
